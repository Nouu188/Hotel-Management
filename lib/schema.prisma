generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentMethod {
  CASH
  E_WALLET
  CREDITCARD
  DEBITCARD
  PREPAIDCARD
}

enum BillStatus {
  UNPAID
  PAID
  CANCELLED
  PENDING
}

model User {
  id   String   @id @default(uuid()) 
  name      String
  email     String   @unique
  location  String?
  role      String @default("USER")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account   Account? 
}

model Account {
  id        String @id @default(uuid()) 
  userId    String @unique
  image     String?
  password  String?

  provider  String 
  providerAccountId   String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
}

enum RoomStatus {
  AVAILABLE
  BOOKED
  MAINTAINANCE
}

model RoomIndetail {
  id          String @id @default(uuid())

  name        String
  capacity    Int

  description String
  area        Float
  bedType     String?
  bedNumb     Int @default(1)
  bathNumb    Int @default(1)

  price       Int

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rooms       Room[] @relation("RoomToRoomIndetail")
  
}

model Room {
  id          String @id @default(uuid())
  branchId    String 
  roomInDetailId  String

  status      RoomStatus

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  hotel       HotelBranch @relation(fields: [branchId], references: [id])
  RoomInDetailss  BookingRoomItem[]

  roomIndetail    RoomIndetail @relation("RoomToRoomIndetail", fields: [roomInDetailId], references: [id])
}

model HotelBranch {
  id        String @id @default(uuid())
  name      String @unique
  location  String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  room      Room[]
}

model BookingGuest {
  id          String @id @default(uuid())
  bookingId   String @unique

  firstName   String
  lastName    String
  email       String
  personalRequest     String?
  planedArrivalTime   String
  guestNumb  Int?

  booking     Booking @relation(fields: [bookingId], references: [id])
}

model Booking {
  id          String @id @default(uuid())

  fromDate    DateTime
  toDate      DateTime

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  RoomInDetails    BookingRoomItem[]
  bookingguest    BookingGuest?
}

model BookingRoomItem {
  id        String @id @default(uuid())

  bookingId String
  roomId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  room      Room    @relation(fields: [roomId], references: [id])   
                
  usingservices UsingService[]

  @@unique([bookingId, roomId])
}

model Bill {
  id          String @id @default(uuid())
  staffId     String @unique

  checkIn     DateTime
  checkOut    DateTime
  paymentMethod   PaymentMethod
  status      BillStatus

  voucher     Float
  finalAmount Float

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  staff       Staff @relation(fields: [staffId], references: [id])
}

enum StaffRole {
  RECEPTIONIST
  RESERVATION
  CASHIER
}

model Staff {
  id          String @id @default(uuid())

  name        String
  role        StaffRole
  enrollDate  DateTime

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bill        Bill?
}

model UsingService {
  id          String @id @default(uuid())
  bookingId  String?

  serviceId   String

  RoomInDetailss  BookingRoomItem[]
  service     Service[]
}

model Service {
  id          String @id @default(uuid())
  usingServiceId    String?

  name        String
  price       Int
  image       String[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  usingService    UsingService[] 
}

