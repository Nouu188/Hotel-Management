generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  location  String?
  role      String    @default("USER")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  account   Account?
  booking   Booking[]
}

model Account {
  id                String   @id @default(uuid())
  userId            String   @unique
  image             String?
  password          String?
  provider          String
  providerAccountId String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RoomType {
  id                   String                @id @default(uuid())
  name                 String
  capacity             Int
  description          String
  area                 Float
  bedType              String?
  bedNumb              Int                   @default(1)
  bathNumb             Int                   @default(1)
  price                Int
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  image                String[]
  hotelBranchRoomTypes HotelBranchRoomType[] @relation("RoomTypeToHotelBranchRoomType")
}

model HotelBranchRoomType {
  id            String            @id @default(uuid())
  hotelBranchId String
  roomTypeId    String
  quantity      Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  bookingItems  BookingRoomItem[]
  hotelBranch   HotelBranch       @relation(fields: [hotelBranchId], references: [id], onDelete: Cascade)
  roomType      RoomType          @relation("RoomTypeToHotelBranchRoomType", fields: [roomTypeId], references: [id], onDelete: Cascade)

  @@unique([hotelBranchId, roomTypeId])
}

model HotelBranch {
  id                   String                @id @default(uuid())
  name                 String                @unique
  location             String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  hotelBranchRoomTypes HotelBranchRoomType[]
}

model BookingGuest {
  id                String   @id @default(uuid())
  bookingId         String   @unique
  firstName         String
  lastName          String
  email             String
  personalRequest   String?
  planedArrivalTime String
  phone             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  booking           Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Booking {
  id               String            @id @default(uuid())
  userId           String
  fromDate         DateTime
  toDate           DateTime
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  bill             Bill?
  user             User              @relation(fields: [userId], references: [id])
  bookingGuest     BookingGuest?
  bookingRoomItems BookingRoomItem[]
  usingservices    UsingService[]
}

model BookingRoomItem {
  id                    String              @id @default(uuid())
  bookingId             String
  hotelBranchRoomTypeId String
  quantityBooked        Int
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  booking               Booking             @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  hotelBranchRoomType   HotelBranchRoomType @relation(fields: [hotelBranchRoomTypeId], references: [id])

  @@unique([bookingId, hotelBranchRoomTypeId])
}

model Bill {
  id            String        @id @default(uuid())
  bookingId     String        @unique
  staffId       String
  checkIn       DateTime
  checkOut      DateTime
  paymentMethod PaymentMethod
  status        BillStatus
  voucher       Float         @default(0)
  finalAmount   Float
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  booking       Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  staff         Staff         @relation(fields: [staffId], references: [id])
}

model Staff {
  id         String    @id @default(uuid())
  name       String
  role       StaffRole
  enrollDate DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  bills      Bill[]
}

model UsingService {
  id        String   @id @default(uuid())
  bookingId String
  serviceId String
  quantity  Int      @default(1)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  service   Service  @relation(fields: [serviceId], references: [id])

  @@unique([bookingId, serviceId])
}

model Service {
  id            String         @id @default(uuid())
  name          String         @unique
  price         Int
  image         String[]
  description   String?
  priceType     String?
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  usingServices UsingService[]
}

enum PaymentMethod {
  CASH
  E_WALLET
  CREDITCARD
  DEBITCARD
  PREPAIDCARD
}

enum BillStatus {
  UNPAID
  PAID
  CANCELLED
  PENDING
}

enum PriceType {
  PERBOOKING
  PERADULT
}

enum StaffRole {
  RECEPTIONIST
  RESERVATION
  CASHIER
}
