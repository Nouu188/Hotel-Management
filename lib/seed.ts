// prisma/seed.ts

import { PrismaClient } from '@prisma/client';

// Kh·ªüi t·∫°o Prisma Client
const prisma = new PrismaClient();

async function main() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh seeding d·ªØ li·ªáu kho ph√≤ng (Room Availability)...');

  // 1. L·∫•y t·∫•t c·∫£ c√°c lo·∫°i ph√≤ng ƒëang c√≥ trong h·ªá th·ªëng
  const allRoomTypes = await prisma.hotelBranchRoomType.findMany({
    select: {
      id: true,
      quantity: true,
    },
  });

  if (allRoomTypes.length === 0) {
    console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y lo·∫°i ph√≤ng n√†o (HotelBranchRoomType). B·ªè qua vi·ªác seeding.');
    return;
  }

  console.log(`üîç T√¨m th·∫•y ${allRoomTypes.length} lo·∫°i ph√≤ng. B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu kho ph√≤ng...`);

  // 2. Chu·∫©n b·ªã m·ªôt m·∫£ng l·ªõn ƒë·ªÉ ch·ª©a t·∫•t c·∫£ c√°c b·∫£n ghi m·ªõi
  const allAvailabilityRecords = [];
  const startDate = new Date();
  startDate.setUTCHours(0, 0, 0, 0); // B·∫Øt ƒë·∫ßu t·ª´ ƒë·∫ßu ng√†y h√¥m nay (UTC)

  // L·∫∑p qua t·ª´ng lo·∫°i ph√≤ng
  for (const roomType of allRoomTypes) {
    // 3. V·ªõi m·ªói lo·∫°i ph√≤ng, t·∫°o d·ªØ li·ªáu cho 365 ng√†y ti·∫øp theo
    for (let i = 0; i < 365; i++) {
      const currentDate = new Date(startDate);
      currentDate.setUTCDate(startDate.getUTCDate() + i);

      // T·∫°o object d·ªØ li·ªáu cho m·ªôt ng√†y
      const availabilityData = {
        date: currentDate,
        hotelBranchRoomTypeId: roomType.id,
        totalRooms: roomType.quantity,
        bookedRooms: 0, // Ban ƒë·∫ßu ch∆∞a c√≥ ph√≤ng n√†o ƒë∆∞·ª£c ƒë·∫∑t
      };
      
      allAvailabilityRecords.push(availabilityData);
    }
  }

  console.log(`‚úÖ ƒê√£ chu·∫©n b·ªã ${allAvailabilityRecords.length} b·∫£n ghi kho ph√≤ng. B·∫Øt ƒë·∫ßu ghi v√†o c∆° s·ªü d·ªØ li·ªáu...`);

  // 4. S·ª≠ d·ª•ng createMany ƒë·ªÉ th√™m t·∫•t c·∫£ d·ªØ li·ªáu v√†o CSDL trong m·ªôt l·∫ßn
  // ƒê√¢y l√† c√°ch c·ª±c k·ª≥ hi·ªáu qu·∫£ ƒë·ªÉ insert s·ªë l∆∞·ª£ng l·ªõn b·∫£n ghi.
  // `skipDuplicates: true` s·∫Ω b·ªè qua vi·ªác t·∫°o m·ªõi n·∫øu b·∫£n ghi cho ng√†y ƒë√≥ ƒë√£ t·ªìn t·∫°i,
  // gi√∫p b·∫°n c√≥ th·ªÉ ch·∫°y l·∫°i script n√†y nhi·ªÅu l·∫ßn m√† kh√¥ng b·ªã l·ªói.
  await prisma.roomAvailability.createMany({
    data: allAvailabilityRecords,
    skipDuplicates: true,
  });

  console.log('üéâ Seeding d·ªØ li·ªáu kho ph√≤ng th√†nh c√¥ng!');
}

// Ch·∫°y h√†m main v√† x·ª≠ l√Ω l·ªói
main()
  .catch((e) => {
    console.error('‚ùå ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh seeding:', e);
    process.exit(1);
  })
  .finally(async () => {
    // Lu√¥n ƒë√≥ng k·∫øt n·ªëi Prisma khi ho√†n t·∫•t
    await prisma.$disconnect();
  });